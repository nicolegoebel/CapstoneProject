efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gpa_nor)
cor(gpa_nor,gch_nor)
l_nor<-(gch_nor~gpa_nor)
l_nor<-lm(gch_nor~gpa_nor)
fit<-lm(child ~ parent, galton)
sqrt(fit$residuals/n-2)
sqrt(sum(fit$residuals)/n-2)
sqrt(sum(fit$residuals^2)/n-2)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-sum((galton$child-mu)^2)
sRes<-deviance(fit)^2
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1,
| trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
swirl()
next()
all<-lm(Fertility~.,swiss)
summary(all)
lm(Fertility~agriculture,swiss)
lm(Fertility~agriculture,swiss)
lm(Fertility~Agriculture,swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education)
cor(Examination, Education, data=swiss)
cor(Examination, Education, data=Swiss)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
next()
ec<-swiss$Examination+swiss$Catholic
efit<-lm(Fertility~.+ec,swiss)
all$coef-efit$coef
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
InsectSprays$A
sA
summary(InsectSprays[,2])
sapply(InsectSprays, classes)
?sapply
sapply(InsectSprays, class)
fit<-lm(count~., InsectSprays)
fit$coef
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean*sB
mean(sB)
nfit<-lm(count~.-1, InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray, C)
spray2<-relevel(InsectSprays$spray, "C")
fit2<-lm(count~.-1, spray2)
spray2
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[2]-fit$coef[3]/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hinger)
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year, hunger)
summary(fit)$coef
lmF<-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"], hunger)
lmM<-lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"], hunger)
lmBoth<-lm(Numeric~Year+Sex, hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+ Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
sigma<-srt(deviance(fit)/fit$dof)
sigma<-sqrt(deviance(fit)/fit$dof)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd<-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
Use plot(fit, which=3)
plot(fit, which=3)
plot(fit, which=2)
sigma1<-sqrt(deviance(fitno)/df.resid(fitno))
sigma1<-sqrt(deviance(fitno)/df.fitno(resid))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
predict(fitno, out2)-predict(fit, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
dy/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility~., Swiss)
mdl<-lm(Fertility~., swiss)
vif(mdl)
mdl2<-lm(Fertility~.-Education, swiss)
mdl2<-lm(Fertility~.-Examin'ation, swiss)
''
mdl2<-lm(Fertility~.-Examination, swiss)
vif(mdl2)
x1c<-simbias()
apply(x1c, 1, mean)
fit1<-lm(Fertility~Agriculture, swiss)
fit3<-lm(Fertility~Agriculture+Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2,43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl<-glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds<-predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date,poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits’])
)
()
)
P
)
)\
which.max(hits[,'visits’])
which.max(hits[,"visits"])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, offset=log(visits+1) ,poisson, hits)
mdl2 <- glm(simplystats ~ date, offset=log(visits+1) ,poisson, hits)
summary(mdl2)
qpois(.95,mdl2$fitted.values[704])
skip()
skip()
skip()
skip()
skip()
skip()
as.integer(head(hits[,'date'])
)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library(rWBclimate)
countries <-c("USA","BRA","CAN","YEM")
st=1900
en=2100
data_df_all <- get_ensemble_temp(countries, type="annualavg", start=st, end=en)
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
runApp()
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
get_ensemble_temp(countries, type="annualavg", start=st, end=en)
get_ensemble_temp(countries, type="annualavg", start=st, end=en)
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
names(iris) = gsub("\\.", "", names(iris))
r1<-rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1
r1$save('r1b.html', cdn = F)
r1b.html
r1
r1$LIB$url
getwd()
r1$save('r1c.html', cdn = T)
r1c
r1
r1$save('r1c.html', cdn = F)
require(rCharts)
names(iris) = gsub("\\.", "", names(iris))
r1<-rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('r1.html', cdn = F)
rr1$LIB$url
r1$LIB$url
r1
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/DevelopingDataProducts/test')
---
---
---
shiny::runApp('Desktop/tempPredict_oneplot')
shiny::runApp('Desktop/tempPredict_oneplot')
shiny::runApp('Desktop/tempPredict_oneplot')
shinyapps::configureApp("temperature_map_prediction", size="xxlarge")
iris
ls()
5/927
608/927
?plot
?DocumentTermMatrix
??DocumentTermMatrix
tail(big_smallAssoc, 10)
big_smallAssoc<-findAssocs(dtm, c("small","big"), corlimit=c(0.8, 0.8))
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
?sample
dims <- dim(test4)
dims[1]
testNo <- dims[1]*.3
testNo
testNo <- round(dims[1]*.3)
testNo
c(1:10)
sampleTest <- (c(1:dims[1]), size = testNo, replace=FALSE)
vec <- c(1:dims[1])
vec
sampleTest <- (vec, size = testNo, replace=FALSE)
testNo
length(vec)
sampleTest <- (vec, testNo, replace=FALSE)
sampleTest <- sample(vec, testNo, replace=FALSE)
head(sampleTest)
gram4<-test4
rm(test4)
rm(train4)
head(test4)
head(gram4)
head(gram4[1:4,])
test4<-gram3[sampleTest,]
test4<-gram4[sampleTest,]
head(test4)
train4<-gram4[!sampleTest,]
dim(train4)
dim(test4)
310292+724015
dim(gram4)
dim(test4)[1]
for (n in 1:dim(test4)[1]) {
ans <- list(test4[[5]][n])
tmpList<-train4[list(test4[[2]][n], test4[[3]][n], test4[[4]][n])]
if (!all(is.na(tmpList[,freq]))) {
if (ans[[1]] %in% tmpList$w4[1:3]){y <- y+1 } else{n <- n+1}
} else {tmpList<-train3[list(test4[[3]][n], test4[[4]][n])]}
if (!all(is.na(tmpList[,freq]))) {
if (ans[[1]] %in% tmpList$w3[1:3]){y <- y+1 } else{n <- n+1}
} else {tmpList<-train2[list(test4[[4]][n])]}
if (ans[[1]] %in% tmpList$w2[1:3]){y <- y+1} else{n <- n+1}
}
print(paste("n = ", n))
print(paste("y = ", y))
y <- 0
n <-0
for (n in 1:dim(test4)[1]) {
ans <- list(test4[[5]][n])
tmpList<-train4[list(test4[[2]][n], test4[[3]][n], test4[[4]][n])]
if (!all(is.na(tmpList[,freq]))) {
if (ans[[1]] %in% tmpList$w4[1:3]){y <- y+1 } else{n <- n+1}
} else {tmpList<-train3[list(test4[[3]][n], test4[[4]][n])]}
if (!all(is.na(tmpList[,freq]))) {
if (ans[[1]] %in% tmpList$w3[1:3]){y <- y+1 } else{n <- n+1}
} else {tmpList<-train2[list(test4[[4]][n])]}
if (ans[[1]] %in% tmpList$w2[1:3]){y <- y+1} else{n <- n+1}
}
print(paste("n = ", n))
print(paste("y = ", y))
y <- 0
n <-0
for (n in 1:dim(test4)[1]) {
ans <- list(test4[[5]][n])
tmpList<-train4[list(test4[[2]][n], test4[[3]][n], test4[[4]][n])]
if (!all(is.na(tmpList[,freq]))) {
if (ans[[1]] %in% tmpList$w4[1:3]){y <- y+1 } else{n <- n+1}
} else {tmpList<-train3[list(test4[[3]][n], test4[[4]][n])]}
if (!all(is.na(tmpList[,freq]))) {
if (ans[[1]] %in% tmpList$w3[1:3]){y <- y+1 } else{n <- n+1}
} else {tmpList<-train2[list(test4[[4]][n])]}
if (ans[[1]] %in% tmpList$w2[1:3]){y <- y+1} else{n <- n+1}
}
head(test4)
y
n<-
0
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
i
test4[[5]]
test4[[5]][i]
list(test4[[5]][i])
(test4[[5]][i])
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
24393/(24393+782644)
yup
nope
tmpList
ans
tmpList$w5
head(train4)
tmpList
i
tmp<-<-train4[list(test4[[2]][i], test4[[3]][i], test4[[4]][i])]
tmp<-train4[list(test4[[2]][i], test4[[3]][i], test4[[4]][i])]
tmp
tmp<-train4[test4[[2]][i], test4[[3]][i], test4[[4]][i]]
tmp<-train4[list(test4[[2]][i], test4[[3]][i], test4[[4]][i])]
tmp
ans
tmp<-train4[list(test4[[2]][i], test4[[3]][i], test4[[4]][i], test4[[5]][i])]
tmp
train4[[i]]
train4[i,]
ans
str(test4)
dim(test4)
i
tmpList4<-train4[list(test4[[2]][i], test4[[3]][i], test4[[4]][i])]
tmpList3<-train3[list(test4[[3]][i], test4[[4]][i])]}
tmpList3<-train3[list(test4[[3]][i], test4[[4]][i])]
tmpList2<-train2[list(test4[[4]][i])]
tmpList4
tmpList3
ans <- (test4[[5]][i])
ans
test4[[2]][i]
test4[[3]][i]
test4[[4]][i]
tmpList4
ans
ans[[1]] %in% tmpList$w4[1:3]
tmpList4
tmpList3
tmpList<-tmpList3
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
ls()
head(train4)
head(test4)
train4<-test4
head(train4)
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
tmpList
ans
!all(is.na(tmpList[,freq]))
yup
nope
if (ans[[1]] %in% tmpList$w4[1:3]){yup <- yup+1 } else{nope <- nope+1}
yup
nope
ans[[1]] %in% tmpList$w4[1:3]
yup
if (ans[[1]] %in% tmpList$w4[1:3]){yup <- yup+1 } else{nope <- nope+1}
yup
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
yup
i=2
ans <- (test4[[5]][i])
tmpList<-train4[list(test4[[2]][i], test4[[3]][i], test4[[4]][i])]
an
ans
tmpList
if (!all(is.na(tmpList[,freq]))) {
if (ans[[1]] %in% tmpList$w4[1:3]) {
yup <- yup+1
} else {nope <- nope+1}
yup
)
yup
if (!all(is.na(tmpList[,freq]))) {
if (ans[[1]] %in% tmpList$w4[1:3]) {
yup <- yup+1
} else {nope <- nope+1}
} else {tmpList<-train3[list(test4[[3]][i], test4[[4]][i])]}
yup
ans[[1]] %in% tmpList$w4[1:3]
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
vec <- c(1:dims(test4[1])
)
vec <- c(1:dim(test4[1]))
vec <- c(1:dim(test4)[1])
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy.R')
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy_origDataOnly.R')
rm(list=ls())
load(file="/Users/nicolegoebel/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/final/en_US/ngrams_4_3_2_1.RData")
ls()
train4 <- N4T
train3 <- N3T
train2 <- N2T
rm(list=ls()[ls() %in% c("N4T","N3T", "N2T", "N1T")])
#break up test4 into test and training sets
testNo <- round(dim(test4)[1]*.3)
rm(list=ls())
load(file="/Users/nicolegoebel/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/final/en_US/ngrams_4_3_2_1.RData")
test4 <- N4T
test3 <- N3T
test2 <- N2T
rm(list=ls()[ls() %in% c("N4T","N3T", "N2T", "N1T")])
ls()
testNo <- round(dim(test4)[1]*.3)
testNo
sampleTest <- sample(vec, testNo, replace=FALSE)
vec <- c(1:dim(test4)[1])
sampleTest <- sample(vec, testNo, replace=FALSE)
gram4<-test4
rm(test4)#;rm(train4)
test4<-gram4[sampleTest,]
train4<-gram4[!sampleTest,]
rm(sampleTest)
testNo <- round(dim(test3)[1]*.3)
vec <- c(1:dim(test3)[1])
sampleTest <- sample(vec, testNo, replace=FALSE)
gram3<-test3
rm(test3)#;rm(train3)
train3<-gram3[!sampleTest,]
rm(sampleTest)
ls()
testNo <- round(dim(test2)[1]*.3)
vec <- c(1:dim(test2)[1])
sampleTest <- sample(vec, testNo, replace=FALSE)
gram2<-test2
rm(test2)#;rm(train2)
#test2<-gram2[sampleTest,]
train2<-gram2[!sampleTest,]
rm(sampleTest)
ls()
rm(gram*)
rm(c("gram2", "gram3", "gram4")
)
rm("gram2", "gram3", "gram4")
ls()
rm(testNo)
rm(vec)
yup <- 0
nope <-0
for (i in 1:dim(test4)[1]) {
ans <- (test4[[5]][i])
tmpList<-train4[list(test4[[2]][i], test4[[3]][i], test4[[4]][i])]
if (!all(is.na(tmpList[,freq]))) {
if (ans[[1]] %in% tmpList$w4[1:3]) { yup <- yup + 1 } else { nope <- nope+1 }
} else {tmpList<-train3[list(test4[[3]][i], test4[[4]][i])]
if (!all(is.na(tmpList[,freq]))) {
if (ans[[1]] %in% tmpList$w3[1:3]) { yup <- yup+1 } else { nope <- nope+1 }
} else {tmpList<-train2[list(test4[[4]][i])]
if (ans[[1]] %in% tmpList$w2[1:3]) { yup <- yup+1 } else { nope <- nope+1 }
}
}
}
print(paste("n = ", nope))
print(paste("y = ", yup))
print(paste("accuracy = ", (yup/(yup+nope))*100))
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy_origDataOnly.R')
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy_origDataOnly.R')
source('~/Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/testAccuracy_origDataOnly.R')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/shiny_NLP_COCA_only')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/shiny_NLP_COCA_combo')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/shiny_NLP_COCA_combo')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/shiny_NLP_COCA_combo')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/shiny_NLP_COCA_combo')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/shiny_NLP_COCA_combo')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/shiny_NLP_COCA_combo')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/shiny_NLP_COCA_combo')
shiny::runApp('Dropbox/Courses/Coursera_Data_Science_2014/CapstoneProject/shiny_NLP_COCA_combo')
